name: Docker Image CI/CD

on:
  push:
    branches:
      - "*"
    # paths:
    #   - "server/service/gateway/**"
    #   - "server/service/other/**"
    #   - "server/common/**"
    #   - "server/utils/**"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: zhangzhulei
      IMAGE_NAME: zhangzhulei

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get branch name
        id: branch_name
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get image new version
        id: existing_versions
        run: |
          current_version=$(curl -s https://registry.hub.docker.com/v2/repositories/zhangzhulei/${{ env.IMAGE_NAME }}/tags | jq -r '.results[0].name')  

          if [[ '${{ steps.existing_versions.outputs.current_version }}' == 'null' ]]; then  
            major=0  
            minor=0  
            patch=0  
          else
            major=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $1}')  
            minor=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $2}')  
            patch=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $3}')  
          fi

          if [ "${{ steps.branch_name.outputs.branch }}" == "master" ]; then
            major=$((major+1))
            minor=0
            patch=0
          elif [ "${{ steps.branch_name.outputs.branch }}" == "develop" ]; then
            minor=$((minor+1))
            patch=0
          else
            patch=$((patch+1))
          fi

          echo "current_version ${current_version}"


          new_version="$major.$minor.$patch"
          echo "new_version ${new_version}"

          echo "::set-output name=new_version::$new_version"

      - name: Build and push Docker image for service github-actions-test
        # if: contains(github.event.pushed_paths, 'server/service/gateway/**')

        run: |
          service_name='github-actions-test'
          image_name='github-actions-test'

          # 设置环境变量
          echo "IMAGE_NAME=${image_name}" >> $GITHUB_ENV

          # 执行 existing_versions 步骤的逻辑，使用当前步骤的环境变量（包括新设置的 image_name）来获取新的版本号
          ${{ steps.existing_versions.run }}    

          # docker build -t ${namespace}/${image_name}:${{ steps.existing_versions.outputs.new_version }} server/service/${service_name}/Dockerfile
          # docker push ${namespace}/${image_name}:${{ steps.existing_versions.outputs.new_version }}
          echo "Service ${service_name} image tag: ${{ steps.existing_versions.outputs.new_version }}"

      - name: Build and push Docker image for service user
        # if: contains(github.event.pushed_paths, 'server/service/b/**')
        run: |
          service_name='user'
          image_name='qiji-${service_name}-test'

          # 设置环境变量  
          echo "IMAGE_NAME=${image_name}" >> $GITHUB_ENV

          # 执行 existing_versions 步骤的逻辑，使用当前步骤的环境变量（包括新设置的 image_name）来获取新的版本号
          ${{ steps.existing_versions.run }}    

          # docker build -t ${namespace}/${image_name}:${{ steps.existing_versions.outputs.new_version }} server/service/${service_name}/Dockerfile
          # docker push ${namespace}/${image_name}:${{ steps.existing_versions.outputs.new_version }}
          echo "Service ${service_name} image tag: ${{ steps.existing_versions.outputs.new_version }}"
