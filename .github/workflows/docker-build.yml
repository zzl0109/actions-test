# # docker-build.yml

# name: Docker Build and Push

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           file: Dockerfile # 指定Dockerfile的正确路径
#           push: true
#           tags: zhangzhulei/github-actions-test:latest

# docker-build.yml
name: Docker Build and Push

on:
  push:
    branches:
      - "*"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get existing image versions
        id: existing_versions
        run: |
          version=$(curl -s https://registry.hub.docker.com/v2/repositories/zhangzhulei/github-actions-test/tags | jq -r '.results[0].name')
          echo "get version $(curl -s https://registry.hub.docker.com/v2/repositories/zhangzhulei/github-actions-test/tags | jq -r '.results[0].name')"
          echo "::set-output name=current_version::$version"

      - name: Build and push Docker images
        run: |
          # Check if any of the service directories have changed  
          if [[ '${{ steps.existing_versions.outputs.current_version }}' == 'null' ]]; then  
            major=0  
            minor=0  
            patch=0  
          else
            major=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $1}')  
            minor=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $2}')  
            patch=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $3}')  
          fi

          # major=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $1}')  
          # minor=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $2}')  
          # patch=$(echo ${{ steps.existing_versions.outputs.current_version }} | awk -F. '{print $3}')  
          # 将主版本、次版本和补丁版本转换为整数类型  
          # major=$((major+0))  
          # minor=$((minor+0))  
          # patch=$((patch+0))

          echo "current version $major.$minor.$patch" 
          echo "existing_versions ${{ steps.existing_versions.outputs.current_version }}" 

          patch=$((patch+1))


          new_version="$major.$minor.$patch"  
          # Build and push the Docker image with the new version number, and print the version number  
          docker build -t zhangzhulei/github-actions-test:$new_version -f Dockerfile .  
          docker push zhangzhulei/github-actions-test:$new_version  
          echo "Built and pushed zhangzhulei/github-actions-test with version $new_version"

          services=("service/a" "service/b") # Add more services here if needed  
          for service in "${services[@]}"; do  
            echo "Service ${service} image tag: "  
          done

          services1=("service-a" "service-b") # Add more services here if needed  
          for service in "${services1[@]}"; do  
            echo "Service ${service} image tag: "  
          done
